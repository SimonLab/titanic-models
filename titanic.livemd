<!-- livebook:{"persist_outputs":true} -->

# Titanic

```elixir
Mix.install([
  {:explorer, "~> 0.5.6"},
  {:kino_explorer, "~> 0.1.4"},
  {:scholar, "~> 0.1.0"}
])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Section

```elixir
require Explorer.DataFrame, as: DF

# alias Explorer.Series, as: S
# require Explorer.Query

# Read csv file
df = DF.from_csv!("/home/simon/Documents/ai/titanic-models/titanic.csv")
```

```elixir
# Remove PassengerId, Name, Ticket and Cabin features
# Convert nil to mean values for Age
# Remove other nil values (2 for Fare, 1 for Embarked)
df =
  df
  |> DF.discard(["PassengerId", "Name", "Ticket", "Cabin"])
  |> DF.mutate(Age: fill_missing(col("Age"), :mean))
  |> DF.drop_nil()

# Convert Sex and Embarked string values to numerical values

# Create a new sex serie which convert "male", "female" to 0 and 1
sex =
  Explorer.Series.transform(df["Sex"], fn s ->
    if s == "male", do: 0, else: 1
  end)

# Create a new embarked serie to convert "S", "C" and "Q" to 0, 1, 2
embarked =
  Explorer.Series.transform(df["Embarked"], fn e ->
    case e do
      "S" -> 0
      "C" -> 1
      "Q" -> 2
    end
  end)

# Replace the "Sex" and "Embarked" feature with the new
# series created above
df =
  df
  |> DF.put("Sex", sex)
  |> DF.put("Embarked", embarked)
```

```elixir
# Logistic Regression using Scholar: https://hexdocs.pm/scholar/Scholar.Linear.LogisticRegression.html

y = df["Survived"] |> Explorer.Series.to_tensor()

x =
  df
  |> DF.discard("Survived")
  |> Nx.stack(axis: 1)

# |> Explorer.DataFrame.to_series()
# |> Enum.map(fn {_name, s} -> Explorer.Series.to_tensor(s) end)

# y
model = Scholar.Linear.LogisticRegression.fit(x, y, num_classes: 2)

Scholar.Linear.LogisticRegression.predict(
  model,
  Nx.tensor([[3.0, 1.0, 22.0, 1.0, 0.0, 7.25, 0.0], [3.0, 1.0, 22.0, 1.0, 0.0, 7.25, 0.0]])
)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[2]
  [0, 0]
>
```

```elixir

```
