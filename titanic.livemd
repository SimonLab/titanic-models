<!-- livebook:{"persist_outputs":true} -->

# Titanic

```elixir
Mix.install([
  {:explorer, "~> 0.5.6"},
  {:kino_explorer, "~> 0.1.4"}
])
```

<!-- livebook:{"output":true} -->

```
Resolving Hex dependencies...
Resolution completed in 0.132s
New:
  castore 1.0.1
  explorer 0.5.6
  kino 0.9.2
  kino_explorer 0.1.4
  rustler_precompiled 0.6.1
  table 0.1.2
  table_rex 3.1.1
* Getting explorer (Hex package)
* Getting kino_explorer (Hex package)
* Getting kino (Hex package)
* Getting table (Hex package)
* Getting rustler_precompiled (Hex package)
* Getting table_rex (Hex package)
* Getting castore (Hex package)
==> table
Compiling 5 files (.ex)
Generated table app
==> kino
Compiling 39 files (.ex)
Generated kino app
==> table_rex
Compiling 7 files (.ex)
Generated table_rex app
==> castore
Compiling 1 file (.ex)
Generated castore app
==> rustler_precompiled
Compiling 4 files (.ex)
Generated rustler_precompiled app
==> explorer
Compiling 19 files (.ex)

12:25:31.457 [debug] Copying NIF from cache and extracting to /home/simon/.cache/mix/installs/elixir-1.14.4-erts-13.1.1/fd8c1f84a32925a800ff4d0bb93db7d1/_build/dev/lib/explorer/priv/native/libexplorer-v0.5.6-nif-2.16-x86_64-unknown-linux-gnu.so
Generated explorer app
==> kino_explorer
Compiling 4 files (.ex)
Generated kino_explorer app
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Section

```elixir
require Explorer.DataFrame, as: DF

# alias Explorer.Series, as: S
# require Explorer.Query

# Read csv file
df = DF.from_csv!("/home/simon/Documents/ai/titanic-models/titanic.csv")
```

```elixir
# Remove PassengerId, Name, Ticket and Cabin features
# Convert nil to mean values for Age
# Remove other nil values (2 for Fare, 1 for Embarked)
df =
  df
  |> DF.discard(["PassengerId", "Name", "Ticket", "Cabin"])
  |> DF.mutate(Age: fill_missing(col("Age"), :mean))
  |> DF.drop_nil()

# Convert Sex and Embarked string values to numerical values

# Create a new sex serie which convert "male", "female" to 0 and 1
sex =
  Explorer.Series.transform(df["Sex"], fn s ->
    if s == "male", do: 0, else: 1
  end)

# Create a new embarked serie to convert "S", "C" and "Q" to 0, 1, 2
embarked =
  Explorer.Series.transform(df["Embarked"], fn e ->
    case e do
      "S" -> 0
      "C" -> 1
      "Q" -> 2
    end
  end)

# Replace the "Sex" and "Embarked" feature with the new
# series created above
df =
  df
  |> DF.put("Sex", sex)
  |> DF.put("Embarked", embarked)
```
